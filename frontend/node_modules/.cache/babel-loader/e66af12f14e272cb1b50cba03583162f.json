{"ast":null,"code":"import _regeneratorRuntime from\"G:/Fullstack Course/Final Project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"G:/Fullstack Course/Final Project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* AXIOS */import axios from\"axios\";/* ACTION TYPES */import{USER_LOGIN_REQUEST,USER_LOGIN_SUCCESS,USER_LOGIN_FAIL,USER_LOGOUT,USER_REGISTER_REQUEST,USER_REGISTER_SUCCESS,USER_REGISTER_FAIL,USER_DETAILS_REQUEST,USER_DETAILS_SUCCESS,USER_DETAILS_FAIL,USER_DETAILS_RESET,USER_UPDATE_PROFILE_REQUEST,USER_UPDATE_PROFILE_SUCCESS,USER_UPDATE_PROFILE_FAIL,USER_LIST_REQUEST,USER_LIST_SUCCESS,USER_LIST_FAIL,USER_LIST_RESET,USER_DELETE_REQUEST,USER_DELETE_FAIL,USER_DELETE_SUCCESS,USER_UPDATE_REQUEST,USER_UPDATE_SUCCESS,USER_UPDATE_FAIL}from\"../constants/userConstants\";import{ORDER_LIST_MY_RESET}from\"../constants/orderConstants\";/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */export var login=function login(email,password){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,_yield$axios$post,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:USER_LOGIN_REQUEST});/* MAKE POST REQUEST TO GET BACK THE USER TOKEN */config={headers:{\"Content-type\":\"application/json\"}};_context.next=5;return axios.post(\"/api/users/login/\",{username:email,password:password},config);case 5:_yield$axios$post=_context.sent;data=_yield$axios$post.data;/* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */localStorage.setItem(\"userInfo\",JSON.stringify(data));_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);dispatch({type:USER_LOGIN_FAIL,payload:_context.t0.response&&_context.t0.response.data.detail?_context.t0.response.data.detail:_context.t0.message});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function(_x){return _ref.apply(this,arguments);};}();};/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */export var logout=function logout(){return function(dispatch){/* REMOVE USER INFO FORM LOCAL STORAGE */localStorage.removeItem(\"userInfo\");/* DISPATCH TO REMOVE USER INFO FORM STORE */dispatch({type:USER_LOGOUT});dispatch({type:USER_DETAILS_RESET});/* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */dispatch({type:ORDER_LIST_MY_RESET});/* DISPATCH TO RESET THE DETAILS OF USERS LIST */dispatch({type:USER_LIST_RESET});};};/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */export var register=function register(name,email,password){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var config,_yield$axios$post2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;dispatch({type:USER_REGISTER_REQUEST});/* MAKE POST REQUEST TO GET BACK THE USER TOKEN */config={headers:{\"Content-type\":\"application/json\"}};_context2.next=5;return axios.post(\"/api/users/register/\",{name:name,email:email,password:password},config);case 5:_yield$axios$post2=_context2.sent;data=_yield$axios$post2.data;/* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_REGISTER_SUCCESS,payload:data});/* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */localStorage.setItem(\"userInfo\",JSON.stringify(data));_context2.next=15;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](0);dispatch({type:USER_REGISTER_FAIL,payload:_context2.t0.response&&_context2.t0.response.data.detail?_context2.t0.response.data.detail:_context2.t0.message});case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[0,12]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */export var getUserDetails=function getUserDetails(id){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){var _getState,userInfo,config,_yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;dispatch({type:USER_DETAILS_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n_getState=getState(),userInfo=_getState.userLogin.userInfo;/* MAKE GET REQUEST TO GET BACK THE USER DATA */config={headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token)/* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */}};// USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n_context3.next=6;return axios.get(\"/api/users/\".concat(id,\"/\"),config);case 6:_yield$axios$get=_context3.sent;data=_yield$axios$get.data;/* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_DETAILS_SUCCESS,payload:data});_context3.next=14;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](0);dispatch({type:USER_DETAILS_FAIL,payload:_context3.t0.response&&_context3.t0.response.data.detail?_context3.t0.response.data.detail:_context3.t0.message});case 14:case\"end\":return _context3.stop();}}},_callee3,null,[[0,11]]);}));return function(_x3,_x4){return _ref3.apply(this,arguments);};}();};/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */export var updateUserProfile=function updateUserProfile(user){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch,getState){var _getState2,userInfo,config,_yield$axios$put,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;dispatch({type:USER_UPDATE_PROFILE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n_getState2=getState(),userInfo=_getState2.userLogin.userInfo;/* MAKE PUT REQUEST TO SET THE THE USER DATA */config={headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token)/* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */}};// USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n_context4.next=6;return axios.put(\"/api/users/profile/update\",user,config);case 6:_yield$axios$put=_context4.sent;data=_yield$axios$put.data;/* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_UPDATE_PROFILE_SUCCESS,payload:data});/* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */localStorage.setItem(\"userInfo\",JSON.stringify(data));_context4.next=16;break;case 13:_context4.prev=13;_context4.t0=_context4[\"catch\"](0);dispatch({type:USER_UPDATE_PROFILE_FAIL,payload:_context4.t0.response&&_context4.t0.response.data.detail?_context4.t0.response.data.detail:_context4.t0.message});case 16:case\"end\":return _context4.stop();}}},_callee4,null,[[0,13]]);}));return function(_x5,_x6){return _ref4.apply(this,arguments);};}();};/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */export var listUsers=function listUsers(){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch,getState){var _getState3,userInfo,config,_yield$axios$get2,data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;dispatch({type:USER_LIST_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n_getState3=getState(),userInfo=_getState3.userLogin.userInfo;/* MAKE GET REQUEST TO SET THE THE USERS LIST */config={headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token)/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */}};_context5.next=6;return axios.get(\"/api/users/\",config);case 6:_yield$axios$get2=_context5.sent;data=_yield$axios$get2.data;dispatch({type:USER_LIST_SUCCESS,payload:data});_context5.next=14;break;case 11:_context5.prev=11;_context5.t0=_context5[\"catch\"](0);dispatch({type:USER_LIST_FAIL,payload:_context5.t0.response&&_context5.t0.response.data.detail?_context5.t0.response.data.detail:_context5.t0.message});case 14:case\"end\":return _context5.stop();}}},_callee5,null,[[0,11]]);}));return function(_x7,_x8){return _ref5.apply(this,arguments);};}();};/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */export var deleteUser=function deleteUser(id){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch,getState){var _getState4,userInfo,config,_yield$axios$delete,data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;dispatch({type:USER_DELETE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n_getState4=getState(),userInfo=_getState4.userLogin.userInfo;/* MAKE DELETE REQUEST TO DELETE THE USER */config={headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token)/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */}};_context6.next=6;return axios.delete(\"/api/users/delete/\".concat(id),config);case 6:_yield$axios$delete=_context6.sent;data=_yield$axios$delete.data;dispatch({type:USER_DELETE_SUCCESS,payload:data});_context6.next=14;break;case 11:_context6.prev=11;_context6.t0=_context6[\"catch\"](0);dispatch({type:USER_DELETE_FAIL,payload:_context6.t0.response&&_context6.t0.response.data.detail?_context6.t0.response.data.detail:_context6.t0.message});case 14:case\"end\":return _context6.stop();}}},_callee6,null,[[0,11]]);}));return function(_x9,_x10){return _ref6.apply(this,arguments);};}();};/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */export var updateUser=function updateUser(user){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch,getState){var _getState5,userInfo,config,_yield$axios$put2,data;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;dispatch({type:USER_UPDATE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n_getState5=getState(),userInfo=_getState5.userLogin.userInfo;/* MAKE PUT REQUEST TO EDIT THE USER */config={headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token)/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */}};_context7.next=6;return axios.put(\"/api/users/update/\".concat(user._id,\"/\"),user,config);case 6:_yield$axios$put2=_context7.sent;data=_yield$axios$put2.data;dispatch({type:USER_UPDATE_SUCCESS});/* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */dispatch({type:USER_DETAILS_SUCCESS,payload:data});_context7.next=15;break;case 12:_context7.prev=12;_context7.t0=_context7[\"catch\"](0);dispatch({type:USER_UPDATE_FAIL,payload:_context7.t0.response&&_context7.t0.response.data.detail?_context7.t0.response.data.detail:_context7.t0.message});case 15:case\"end\":return _context7.stop();}}},_callee7,null,[[0,12]]);}));return function(_x11,_x12){return _ref7.apply(this,arguments);};}();};","map":{"version":3,"sources":["G:/Fullstack Course/Final Project/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_FAIL","USER_DELETE_SUCCESS","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","post","username","data","payload","localStorage","setItem","JSON","stringify","response","detail","message","logout","removeItem","register","name","getUserDetails","id","getState","userInfo","userLogin","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"+TAAA,WACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,kBACA,OACEC,kBADF,CAEEC,kBAFF,CAGEC,eAHF,CAIEC,WAJF,CAKEC,qBALF,CAMEC,qBANF,CAOEC,kBAPF,CAQEC,oBARF,CASEC,oBATF,CAUEC,iBAVF,CAWEC,kBAXF,CAYEC,2BAZF,CAaEC,2BAbF,CAcEC,wBAdF,CAeEC,iBAfF,CAgBEC,iBAhBF,CAiBEC,cAjBF,CAkBEC,eAlBF,CAmBEC,mBAnBF,CAoBEC,gBApBF,CAqBEC,mBArBF,CAsBEC,mBAtBF,CAuBEC,mBAvBF,CAwBEC,gBAxBF,KAyBO,4BAzBP,CA2BA,OAASC,mBAAT,KAAoC,6BAApC,CAEA,yEACA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAQC,QAAR,iGAAqB,iBAAOC,QAAP,oKAEtCA,QAAQ,CAAC,CACPC,IAAI,CAAE7B,kBADC,CAAD,CAAR,CAIA,kDACM8B,MAPgC,CAOvB,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAPuB,uBAafhC,CAAAA,KAAK,CAACiC,IAAN,CACrB,mBADqB,CAErB,CAAEC,QAAQ,CAAEP,KAAZ,CAAmBC,QAAQ,CAAEA,QAA7B,CAFqB,CAGrBG,MAHqB,CAbe,wCAa9BI,IAb8B,mBAa9BA,IAb8B,CAmBtC,+EACAN,QAAQ,CAAC,CACPC,IAAI,CAAE5B,kBADC,CAEPkC,OAAO,CAAED,IAFF,CAAD,CAAR,CAKA,8EACAE,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjC,EA1BsC,iFA4BtCN,QAAQ,CAAC,CACPC,IAAI,CAAE3B,eADC,CAEPiC,OAAO,CACL,YAAMK,QAAN,EAAkB,YAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,YAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,YAAMC,OALL,CAAD,CAAR,CA5BsC,qEAArB,gEAAd,CAsCP,0EACA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAACf,QAAD,CAAc,CACxC,yCACAQ,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAEA,6CACAhB,QAAQ,CAAC,CACPC,IAAI,CAAE1B,WADC,CAAD,CAAR,CAGAyB,QAAQ,CAAC,CACPC,IAAI,CAAEnB,kBADC,CAAD,CAAR,CAGA,0DACAkB,QAAQ,CAAC,CACPC,IAAI,CAAEL,mBADC,CAAD,CAAR,CAGA,iDACAI,QAAQ,CAAC,CACPC,IAAI,CAAEZ,eADC,CAAD,CAAR,CAGD,CAnBqB,EAAf,CAqBP,mFACA,MAAO,IAAM4B,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAOpB,KAAP,CAAcC,QAAd,kGAA2B,kBAAOC,QAAP,0KAE/CA,QAAQ,CAAC,CACPC,IAAI,CAAEzB,qBADC,CAAD,CAAR,CAIA,kDACM0B,MAPyC,CAOhC,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAPgC,wBAaxBhC,CAAAA,KAAK,CAACiC,IAAN,CACrB,sBADqB,CAErB,CAAEc,IAAI,CAAEA,IAAR,CAAcpB,KAAK,CAAEA,KAArB,CAA4BC,QAAQ,CAAEA,QAAtC,CAFqB,CAGrBG,MAHqB,CAbwB,0CAavCI,IAbuC,oBAavCA,IAbuC,CAmB/C,+EACAN,QAAQ,CAAC,CACPC,IAAI,CAAExB,qBADC,CAEP8B,OAAO,CAAED,IAFF,CAAD,CAAR,CAKA,8DACAN,QAAQ,CAAC,CACPC,IAAI,CAAE5B,kBADC,CAEPkC,OAAO,CAAED,IAFF,CAAD,CAAR,CAKA,8EACAE,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjC,EAhC+C,qFAkC/CN,QAAQ,CAAC,CACPC,IAAI,CAAEvB,kBADC,CAEP6B,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CAlC+C,uEAA3B,kEAAjB,CA4CP,6EACA,MAAO,IAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,EAAD,kGAAQ,kBAAOpB,QAAP,CAAiBqB,QAAjB,2LAElCrB,QAAQ,CAAC,CACPC,IAAI,CAAEtB,oBADC,CAAD,CAAR,CAIA;AANkC,UAS9B0C,QAAQ,EATsB,CAQnBC,QARmB,WAQhCC,SARgC,CAQnBD,QARmB,CAWlC,gDACMpB,MAZ4B,CAYnB,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPqB,aAAa,kBAAYF,QAAQ,CAACG,KAArB,CAA6B,2GAFnC,CADI,CAZmB,CAmBlC;AAnBkC,uBAoBXtD,CAAAA,KAAK,CAACuD,GAAN,sBAAwBN,EAAxB,MAA+BlB,MAA/B,CApBW,wCAoB1BI,IApB0B,kBAoB1BA,IApB0B,CAsBlC,8EACAN,QAAQ,CAAC,CACPC,IAAI,CAAErB,oBADC,CAEP2B,OAAO,CAAED,IAFF,CAAD,CAAR,CAvBkC,qFA4BlCN,QAAQ,CAAC,CACPC,IAAI,CAAEpB,iBADC,CAEP0B,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CA5BkC,uEAAR,sEAAvB,CAsCP,8EACA,MAAO,IAAMa,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,IAAD,kGAAU,kBAAO5B,QAAP,CAAiBqB,QAAjB,4LAEvCrB,QAAQ,CAAC,CACPC,IAAI,CAAElB,2BADC,CAAD,CAAR,CAIA;AANuC,WASnCsC,QAAQ,EAT2B,CAQxBC,QARwB,YAQrCC,SARqC,CAQxBD,QARwB,CAWvC,+CACMpB,MAZiC,CAYxB,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPqB,aAAa,kBAAYF,QAAQ,CAACG,KAArB,CAA6B,2GAFnC,CADI,CAZwB,CAmBvC;AAnBuC,uBAoBhBtD,CAAAA,KAAK,CAAC0D,GAAN,6BAAuCD,IAAvC,CAA6C1B,MAA7C,CApBgB,wCAoB/BI,IApB+B,kBAoB/BA,IApB+B,CAsBvC,8EACAN,QAAQ,CAAC,CACPC,IAAI,CAAEjB,2BADC,CAEPuB,OAAO,CAAED,IAFF,CAAD,CAAR,CAKA,yFACAN,QAAQ,CAAC,CACPC,IAAI,CAAE5B,kBADC,CAEPkC,OAAO,CAAED,IAFF,CAAD,CAAR,CAKA,yDACAE,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjC,EAnCuC,qFAqCvCN,QAAQ,CAAC,CACPC,IAAI,CAAEhB,wBADC,CAEPsB,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CArCuC,uEAAV,sEAA1B,CA+CP,sEACA,MAAO,IAAMgB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,mGAAM,kBAAO9B,QAAP,CAAiBqB,QAAjB,6LAE3BrB,QAAQ,CAAC,CACPC,IAAI,CAAEf,iBADC,CAAD,CAAR,CAIA;AAN2B,WASvBmC,QAAQ,EATe,CAQZC,QARY,YAQzBC,SARyB,CAQZD,QARY,CAW3B,gDACMpB,MAZqB,CAYZ,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPqB,aAAa,kBAAYF,QAAQ,CAACG,KAArB,CAA6B,uFAFnC,CADI,CAZY,wBAmBJtD,CAAAA,KAAK,CAACuD,GAAN,eAAyBxB,MAAzB,CAnBI,yCAmBnBI,IAnBmB,mBAmBnBA,IAnBmB,CAqB3BN,QAAQ,CAAC,CACPC,IAAI,CAAEd,iBADC,CAEPoB,OAAO,CAAED,IAFF,CAAD,CAAR,CArB2B,qFA0B3BN,QAAQ,CAAC,CACPC,IAAI,CAAEb,cADC,CAEPmB,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CA1B2B,uEAAN,sEAAlB,CAoCP,6DACA,MAAO,IAAMiB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACX,EAAD,kGAAQ,kBAAOpB,QAAP,CAAiBqB,QAAjB,+LAE9BrB,QAAQ,CAAC,CACPC,IAAI,CAAEX,mBADC,CAAD,CAAR,CAIA;AAN8B,WAS1B+B,QAAQ,EATkB,CAQfC,QARe,YAQ5BC,SAR4B,CAQfD,QARe,CAW9B,4CACMpB,MAZwB,CAYf,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPqB,aAAa,kBAAYF,QAAQ,CAACG,KAArB,CAA6B,qFAFnC,CADI,CAZe,wBAmBPtD,CAAAA,KAAK,CAAC6D,MAAN,6BAAkCZ,EAAlC,EAAwClB,MAAxC,CAnBO,2CAmBtBI,IAnBsB,qBAmBtBA,IAnBsB,CAqB9BN,QAAQ,CAAC,CACPC,IAAI,CAAET,mBADC,CAEPe,OAAO,CAAED,IAFF,CAAD,CAAR,CArB8B,qFA0B9BN,QAAQ,CAAC,CACPC,IAAI,CAAEV,gBADC,CAEPgB,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CA1B8B,uEAAR,uEAAnB,CAoCP,6DACA,MAAO,IAAMmB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACL,IAAD,kGAAU,kBAAO5B,QAAP,CAAiBqB,QAAjB,6LAEhCrB,QAAQ,CAAC,CACPC,IAAI,CAAER,mBADC,CAAD,CAAR,CAIA;AANgC,WAS5B4B,QAAQ,EAToB,CAQjBC,QARiB,YAQ9BC,SAR8B,CAQjBD,QARiB,CAWhC,uCACMpB,MAZ0B,CAYjB,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPqB,aAAa,kBAAYF,QAAQ,CAACG,KAArB,CAA6B,mFAFnC,CADI,CAZiB,wBAmBTtD,CAAAA,KAAK,CAAC0D,GAAN,6BACAD,IAAI,CAACM,GADL,MAErBN,IAFqB,CAGrB1B,MAHqB,CAnBS,yCAmBxBI,IAnBwB,mBAmBxBA,IAnBwB,CAyBhCN,QAAQ,CAAC,CACPC,IAAI,CAAEP,mBADC,CAAD,CAAR,CAIA,oDACAM,QAAQ,CAAC,CACPC,IAAI,CAAErB,oBADC,CAEP2B,OAAO,CAAED,IAFF,CAAD,CAAR,CA9BgC,qFAmChCN,QAAQ,CAAC,CACPC,IAAI,CAAEN,gBADC,CAEPY,OAAO,CACL,aAAMK,QAAN,EAAkB,aAAMA,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,CACI,aAAMD,QAAN,CAAeN,IAAf,CAAoBO,MADxB,CAEI,aAAMC,OALL,CAAD,CAAR,CAnCgC,uEAAV,wEAAnB","sourcesContent":["/* AXIOS */\nimport axios from \"axios\";\n\n/* ACTION TYPES */\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_RESET,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_FAIL,\n  USER_DELETE_SUCCESS,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n} from \"../constants/userConstants\";\n\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\n\n/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/login/\",\n      { username: email, password: password },\n      config\n    );\n\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */\nexport const logout = () => (dispatch) => {\n  /* REMOVE USER INFO FORM LOCAL STORAGE */\n  localStorage.removeItem(\"userInfo\");\n\n  /* DISPATCH TO REMOVE USER INFO FORM STORE */\n  dispatch({\n    type: USER_LOGOUT,\n  });\n  dispatch({\n    type: USER_DETAILS_RESET,\n  });\n  /* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */\n  dispatch({\n    type: ORDER_LIST_MY_RESET,\n  });\n  /* DISPATCH TO RESET THE DETAILS OF USERS LIST */\n  dispatch({\n    type: USER_LIST_RESET,\n  });\n};\n\n/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/register/\",\n      { name: name, email: email, password: password },\n      config\n    );\n\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n\n    /* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE GET REQUEST TO GET BACK THE USER DATA */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\n      },\n    };\n\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n    const { data } = await axios.get(`/api/users/${id}/`, config);\n\n    /* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE PUT REQUEST TO SET THE THE USER DATA */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\n      },\n    };\n\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n    const { data } = await axios.put(`/api/users/profile/update`, user, config);\n\n    /* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n\n    /* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE GET REQUEST TO SET THE THE USERS LIST */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */,\n      },\n    };\n\n    const { data } = await axios.get(`/api/users/`, config);\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE DELETE REQUEST TO DELETE THE USER */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */,\n      },\n    };\n\n    const { data } = await axios.delete(`/api/users/delete/${id}`, config);\n\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE PUT REQUEST TO EDIT THE USER */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */,\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/users/update/${user._id}/`,\n      user,\n      config\n    );\n\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n    });\n\n    /* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}